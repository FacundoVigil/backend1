<h1>Carrito de Compras</h1>

{{#if cart.products.length}}
  <ul>
    {{#each cart.products}}
      <li style="margin-bottom: 20px;">
        <h3>{{this.product.title}}</h3>
        <img src="{{this.product.thumbnail}}" alt="{{this.product.title}}" width="150" />
        <p><strong>Descripción:</strong> {{this.product.description}}</p>
        <p><strong>Precio:</strong> ${{this.product.price}}</p>
        <p><strong>Categoría:</strong> {{this.product.category}}</p>

        <label for="quantity-{{this.product._id}}"><strong>Cantidad:</strong></label>
        <input 
          type="number" 
          id="quantity-{{this.product._id}}" 
          min="1" 
          value="{{this.quantity}}" 
          data-productid="{{this.product._id}}"
          style="width: 50px;"
        />

        <button class="update-quantity-btn" data-productid="{{this.product._id}}">Actualizar cantidad</button>

        <button class="delete-product-btn" data-productid="{{this.product._id}}">
          Eliminar del carrito
        </button>
        <hr>
      </li>
    {{/each}}
  </ul>
{{else}}
  <p>El carrito está vacío.</p>
{{/if}}

<button id="empty-cart-btn" style="margin-top: 20px;">Vaciar carrito</button>

<script>
  const cartId = "{{cart._id}}";


  document.querySelectorAll('.update-quantity-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const pid = button.getAttribute('data-productid');
      const input = document.getElementById(`quantity-${pid}`);
      const quantity = parseInt(input.value);

      if (quantity < 1 || isNaN(quantity)) {
        alert('Cantidad inválida. Debe ser un número mayor o igual a 1.');
        return;
      }

      try {
        const response = await fetch(`/carts/${cartId}/products/${pid}`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ quantity })
        });

        if (response.ok) {
          alert('Cantidad actualizada');
          location.reload();
        } else {
          const errorData = await response.json();
          alert('Error al actualizar cantidad: ' + errorData.message);
        }
      } catch (error) {
        alert('Error en la comunicación con el servidor');
      }
    });
  });


  document.querySelectorAll('.delete-product-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const pid = button.getAttribute('data-productid');
      if (!confirm('¿Seguro que querés eliminar este producto del carrito?')) return;

      try {
        const response = await fetch(`/carts/${cartId}/products/${pid}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          alert('Producto eliminado');
          location.reload();
        } else {
          const errorData = await response.json();
          alert('Error al eliminar producto: ' + errorData.message);
        }
      } catch (error) {
        alert('Error en la comunicación con el servidor');
      }
    });
  });


  document.getElementById('empty-cart-btn').addEventListener('click', async () => {
    if (!confirm('¿Querés vaciar todo el carrito?')) return;

    try {
      const response = await fetch(`/carts/${cartId}`, {
        method: 'DELETE'
      });

      if (response.ok) {
        alert('Carrito vaciado');
        location.reload();
      } else {
        const errorData = await response.json();
        alert('Error al vaciar carrito: ' + errorData.message);
      }
    } catch (error) {
      alert('Error en la comunicación con el servidor');
    }
  });
</script>
